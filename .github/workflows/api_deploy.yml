# This workflow will build and push a new container image to Amazon ECR for the api,
# and then will restart the service in Amazon ECS, when there is a push to the "main" branch
# thus having the latest image deployed
#
# To use this workflow, you will need to complete the following set-up steps:
#
# 1. Store an IAM user access key in GitHub Actions secrets named `AWS_ACCESS_KEY_ID` and `AWS_SECRET_ACCESS_KEY`.
#    See the documentation for each action used below for the recommended IAM policies for this IAM user,
#    and best practices on handling the access key credentials.
#
# 2. Store an following as Github Actions variables
#    ECR_REPOSITORY: ECR repository name for API Service
#    ECS_SERVICE: ECS Service name for API Service
#    ECS_CLUSTER: ECS Cluster for application

name: Deploy API to Amazon ECS

on:
  push:
    branches: [ "main" ]

env:
  AWS_REGION: us-east-1                      
  ECR_REPOSITORY: ${{ vars.ECR_REPOSITORY }}  
  ECS_SERVICE: ${{ vars.ECS_SERVICE }}     
  ECS_CLUSTER: ${{ vars.ECS_CLUSTER }}                        

permissions:
  contents: read

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: latest
      run: |
        # Build a docker container and
        # push it to ECR so that it can
        # be deployed to ECS.
        cd ./api
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

    - name: Restart Service
      run: |
        aws ecs update-service --force-new-deployment --service $ECS_SERVICE --cluster $ECS_CLUSTER
